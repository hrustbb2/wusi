!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){var o;void 0===(o=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.wrap=function(t,n,o){if(!t.collapsed||t.endOffset!=t.startOffset){var r=e.getCommonTopNodes(t.startContainer,t.endContainer);if("li"!=r[0].nodeName.toLowerCase()&&"li"!=r[1].nodeName.toLowerCase()){var i=o();if(r[0]==r[1]){var a=t.cloneContents();i.appendChild(a),t.deleteContents(),t.insertNode(i)}else{for(var s=e.getSelectedNodes(r[0].parentElement,t.startContainer,t.endContainer),d=0,c=s;d<c.length;d++){var u=c[d];if(e.isContainNodeName(u,"br"))return}var p=e.cloneNodes(e.getAfterNodes2(r[0],t.startContainer)),l=e.cloneNodes(e.getBeforeNodes2(r[1],t.endContainer)),f=e.splitNode(t.startContainer,t.startOffset),N=e.splitNode(t.endContainer,t.endOffset);r[0].parentNode.removeChild(r[0]),r[1].parentNode.removeChild(r[1]),i.appendChild(document.createTextNode(f[1]));for(var h=0,v=s;h<v.length;h++){u=v[h];i.appendChild(u),e.unWrap(u,n)}i.appendChild(document.createTextNode(N[0]));for(var m=l.length-1;m>=0;m--)t.insertNode(l[m]);t.insertNode(document.createTextNode(N[1])),t.insertNode(i),t.insertNode(document.createTextNode(f[0]));for(m=p.length-1;m>=0;m--)t.insertNode(p[m])}e.pretier(i,n),e.pretier(i.parentNode,n),e.clearSelection()}}},e.getPath=function(t){for(var n=[];!e.isRootNode(t)&&(n.push(t),t.parentNode);)t=t.parentNode;return n},e.unWrap=function(t,n){if(n(t)){for(var o=t.parentNode;t.firstChild;)o.insertBefore(t.firstChild,t);o.removeChild(t),e.pretier(o,n)}for(var r in t.childNodes){if((0^+r)!=+r)break;e.unWrap(t.childNodes[r],n)}},e.getRange=function(){if(!window.getSelection)return document.selection.createRange();var t=e.getSelection();if(t.getRangeAt&&t.rangeCount>0)return t.getRangeAt(0);if(t.anchorNode){var n=document.createRange();return n.setEnd(t.focusNode,t.focusOffset),n}},e.getSelection=function(){return window.getSelection?window.getSelection():document.selection?document.selection.createRange():void 0},e.clearSelection=function(){window.getSelection&&window.getSelection().removeAllRanges()},e.topMyWrapper=function(t,n){return n(t)?t:e.isRootNode(t)?null:e.topMyWrapper(t.parentNode,n)},e.pretier=function(t,n){e.defragmentateTextNodes(t),t.parentNode&&(e.defragmentateTextNodes(t.parentNode),e.deleteEmptyTextNodes(t.parentNode),e.defragmentateMyNodes(t.parentNode,n))},e.cloneNodes=function(t){var n=[];for(var o in t){if((0^+o)!=+o)break;for(var r=t[o].cloneNode(),i=0,a=e.cloneNodes(t[o].childNodes);i<a.length;i++){var s=a[i];r.appendChild(s)}n.push(r)}return n},e.isRootNode=function(e){return!!e.hasAttribute&&e.hasAttribute("editor")},e.findTopNode=function(t,n){for(var o=null,r=t.parentNode;!e.isRootNode(r);){if(r.nodeName.toLowerCase()==n){o=r;break}r=r.parentNode}return o},e.getCommonTopNodes=function(t,n){for(var o=t,r=n;o.parentNode!=r.parentNode;)if(e.isRootNode(o.parentNode)){if(o=t,e.isRootNode(r))break;r=r.parentNode}else o=o.parentNode;return[o,r]},e.getAfterNodes2=function(e,t,n){void 0===n&&(n=!1);var o=[];if(n&&("#text"==t.nodeName?t.parentNode:t)==e)return o;for(var r=e.childNodes,i=0;i<=r.length-1&&r[i]!=t;i++)o.push(r[i]);return o},e.getBeforeNodes2=function(e,t,n){void 0===n&&(n=!1);var o=[];if(n&&("#text"==t.nodeName?t.parentNode:t)==e)return o;for(var r=e.childNodes,i=!1,a=0;a<=r.length-1;a++)i&&o.push(r[a]),r[a]==t&&(i=!0);return o},e.splitNode=function(e,t){var n=[];return"#text"==e.nodeName?(n.push(e.data.substr(0,t)),n.push(e.data.substr(t))):(n.push(e.innerText.substr(0,t)),n.push(e.innerText.substr(t))),n},e.isContainNode=function(t,n){if(t==n)return!0;if("#text"==t.nodeName)return!1;for(var o=!1,r=0;r<=t.childNodes.length-1;r++)if(e.isContainNode(t.childNodes[r],n)){o=!0;break}return o},e.isContainNodeName=function(t,n){if(t.nodeName.toLowerCase()==n)return!0;if("#text"==t.nodeName)return!1;for(var o=!1,r=0;r<=t.childNodes.length-1;r++)if(e.isContainNodeName(t.childNodes[r],n)){o=!0;break}return o},e.isNodeIn=function(e,t){for(var n in t)if(e==t[n])return!0;return!1},e.getSelectedNodes=function(t,n,o){var r=t.childNodes,i=[],a=0,s=e.isRootNode(n.parentNode)?n:n.parentNode,d=e.isRootNode(o.parentNode)?o:o.parentNode;for(var c in r){if((0^+c)!=+c)break;if(0==a&&e.isContainNode(r[c],s)){var u=e.getBeforeNodes2(r[c],s,!0);i=i.concat(u),a=1}else if(1==a){if(e.isContainNode(r[c],d)){var p=e.getAfterNodes2(r[c],d,!0);i=i.concat(p);break}i.push(r[c])}}return i},e.deleteEmptyTextNodes=function(e){for(var t=0,n=e.childNodes;t<=n.length-1;)"#text"==n[t].nodeName&&""==n[t].data?n[t].parentNode.removeChild(n[t]):t++},e.defragmentateTextNodes=function(e){for(var t=0,n=e.childNodes,o=null;t<=n.length-1;)if(o&&"#text"==n[t].nodeName&&"#text"==o.nodeName){var r=o.data;o.data=r+n[t].data,n[t].parentNode.removeChild(n[t])}else o=n[t],t++},e.defragmentateMyNodes=function(e,t){for(var n=0,o=e.childNodes,r=null;n<=o.length-1;)if(r&&t(o[n])&&t(r)){var i=r.innerText;r.innerText=i+o[n].innerText,o[n].parentNode.removeChild(o[n])}else r=o[n],n++},e}();t.StaticTools=n}.apply(t,[n,t]))||(e.exports=o)},function(e,t,n){var o,r;o=[n,t,n(0)],void 0===(r=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){this._wrappersCollection={},this._buttons=new Array,this._keyListeners={},this._editorDiv=e,this._editorDiv.onkeydown=function(e){this.keyPress(e)}.bind(this),e.addEventListener("mouseup",function(e){var t=n.StaticTools.getRange(),o=n.StaticTools.getPath(t.startContainer);for(var r in this._buttons)this._buttons[r].unsetActive(),this.isMyButton(this._buttons[r],o)}.bind(this))}return e.prototype.isMyButton=function(e,t){for(var n in t)t[n].nodeName.toLowerCase()==e.wrapper.elName&&t[n].classList.contains(e.wrapper.className)&&e.setActive()},e.prototype.keyPress=function(e){var t=n.StaticTools.getRange(),o=n.StaticTools.getPath(t.startContainer);for(var r in this._buttons)this._buttons[r].unsetActive(),this.isMyButton(this._buttons[r],o);null==e.which&&e.keyCode<32&&(e.preventDefault(),this._keyListeners[e.keyCode].exec()),0!=e.which&&e.which<32&&this._keyListeners[e.which]&&(e.preventDefault(),this._keyListeners[e.which].exec())},Object.defineProperty(e.prototype,"editorDiv",{get:function(){return this._editorDiv},enumerable:!0,configurable:!0}),e.prototype.addKeyListener=function(e,t){this._keyListeners[e]=t},e.prototype.addWraper=function(e){this._wrappersCollection[e.elName+"_"+e.className]=e},e.prototype.addButton=function(e){if(e.el.addEventListener("mousedown",function(t){t.preventDefault(),this.toolButtonClick(e)}.bind(this)),this._buttons.push(e),this._wrappersCollection[e.wrapper.elName+"_"+e.wrapper.className]=e.wrapper,e.wrapper.child){var t=e.wrapper.child;this._wrappersCollection[t.elName+"_"+t.className]=t}},e.prototype.toolButtonClick=function(e){e.run()},e.prototype.contentToString=function(e){for(var t=e.childNodes,n="",o=0;o<=t.length-1;o++){var r=t[o];if("#text"==r.nodeName)n+=r.data;else{var i=r.nodeName.toLowerCase(),a=r.className,s=this._wrappersCollection[i+"_"+a];n+=s?"br"==i?"[/"+s.bbCode+"]":"["+s.bbCode+"]"+this.contentToString(r)+"[/"+s.bbCode+"]":this.contentToString(r)}}return n},e.prototype.isOpenTag=function(e){for(var t in this._wrappersCollection){var n=this._wrappersCollection[t].bbCode;if(0==e.indexOf("["+n+"]"))return this._wrappersCollection[t]}return null},e.prototype.isCloseTag=function(e){for(var t in this._wrappersCollection){var n=this._wrappersCollection[t].bbCode;if(0==e.indexOf("[/"+n+"]"))return this._wrappersCollection[t]}return null},e.prototype.stringToContent=function(e){for(var t=this.editorDiv,n="",o=0;o<=e.length-1;){var r=e.substr(o,6),i=this.isOpenTag(r);if(i){if(n){var a=document.createTextNode(n);t.appendChild(a),n=""}var s=i.elName,d=i.className,c=document.createElement(s);c.classList.add(d),t.appendChild(c),t=c,o+=i.bbCode.length+2}else{var u=this.isCloseTag(r);if(u){if(t==this.editorDiv)break;if(n){a=document.createTextNode(n);t.appendChild(a),n=""}s=u.elName;t=t.parentElement,o+=u.bbCode.length+3}else n+=e.substr(o,1),o+=1}}if(n){a=document.createTextNode(n);t.appendChild(a),n=""}},e}();t.Editor=o}.apply(t,o))||(e.exports=r)},function(e,t,n){var o,r;o=[n,t,n(0)],void 0===(r=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this._wrapperInfo=t,this._buttonEl=e}return Object.defineProperty(e.prototype,"el",{get:function(){return this._buttonEl},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapper",{get:function(){return this._wrapperInfo},enumerable:!0,configurable:!0}),e.prototype.createWrapper=function(){var e=document.createElement(this._wrapperInfo.elName);return e.classList.add(this._wrapperInfo.className),e},e.prototype.isMyWrapper=function(e){return!(!e.classList||!e.classList.contains)&&e.classList.contains(this._wrapperInfo.className)},e.prototype.run=function(){var e=n.StaticTools.getRange(),t=n.StaticTools.topMyWrapper(e.commonAncestorContainer,this.isMyWrapper.bind(this));null===t?n.StaticTools.wrap(e,this.isMyWrapper.bind(this),this.createWrapper.bind(this)):n.StaticTools.unWrap(t,this.isMyWrapper.bind(this))},e.prototype.setActive=function(){this._buttonEl.classList.add("active-button")},e.prototype.unsetActive=function(){this._buttonEl.classList.remove("active-button")},e}();t.WrapperButton=o}.apply(t,o))||(e.exports=r)},function(e,t,n){var o,r;o=[n,t,n(0)],void 0===(r=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this._buttonEl=e,this._wrapperInfo=t}return Object.defineProperty(e.prototype,"el",{get:function(){return this._buttonEl},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapper",{get:function(){return this._wrapperInfo},enumerable:!0,configurable:!0}),e.prototype.isMyWrapper=function(e){return"li"==e.parentNode.nodeName.toLowerCase()||"ul"==e.parentNode.nodeName.toLowerCase()},e.prototype.createUl=function(){var e=document.createElement(this._wrapperInfo.elName);e.classList.add(this._wrapperInfo.className);var t=document.createElement(this._wrapperInfo.child.elName);return e.appendChild(t),e},e.prototype.run=function(){var e=n.StaticTools.getRange();if(null===n.StaticTools.topMyWrapper(e.commonAncestorContainer,this.isMyWrapper.bind(this))){var t=this.createUl(),o=document.createElement("br"),r=document.createElement("br");e.insertNode(o),e.insertNode(t),e.insertNode(r),e.setStartAfter(t)}},e.prototype.setActive=function(){this._buttonEl.classList.add("active-button")},e.prototype.unsetActive=function(){this._buttonEl.classList.remove("active-button")},e}();t.InsertUl=o}.apply(t,o))||(e.exports=r)},function(e,t,n){var o,r;o=[n,t,n(0)],void 0===(r=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return e.prototype.exec=function(){var e,t=n.StaticTools.getRange();if("LI"==t.commonAncestorContainer.parentNode.nodeName)e=document.createElement("li"),t.commonAncestorContainer.parentNode.parentNode.appendChild(e),t.setStart(e,0);else{var o=document.createElement("br"),r=document.createTextNode(" ");t.insertNode(r),t.insertNode(o),t.setStartAfter(o)}},e.prototype.getRange=function(){if(!window.getSelection)return document.selection.createRange();var e=n.StaticTools.getSelection();if(e.getRangeAt&&e.rangeCount>0)return e.getRangeAt(0);if(e.anchorNode){var t=document.createRange();return t.setEnd(e.focusNode,e.focusOffset),t}},e}();t.KeyListener=o}.apply(t,o))||(e.exports=r)},,,,function(e,t,n){n(1),n(3),n(4),n(0),e.exports=n(2)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vdHMvU3RhdGljVG9vbHMudHMiLCJ3ZWJwYWNrOi8vLy4vdHMvRWRpdG9yLnRzIiwid2VicGFjazovLy8uL3RzL1dyYXBwZXJCdXR0b24udHMiLCJ3ZWJwYWNrOi8vLy4vdHMvSW5zZXJ0VWwudHMiLCJ3ZWJwYWNrOi8vLy4vdHMvS2V5TGlzdGVuZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ3cmFwIiwicmFuZ2UiLCJpc015V3JhcHBlciIsImNyZWF0ZVdyYXBwZXIiLCJjb2xsYXBzZWQiLCJlbmRPZmZzZXQiLCJzdGFydE9mZnNldCIsInRvcE5vZGVzIiwiU3RhdGljVG9vbHMiLCJnZXRDb21tb25Ub3BOb2RlcyIsInN0YXJ0Q29udGFpbmVyIiwiZW5kQ29udGFpbmVyIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIndyYXBwZXIiLCJzZWxlY3RlZENvbnRlbnQiLCJjbG9uZUNvbnRlbnRzIiwiYXBwZW5kQ2hpbGQiLCJkZWxldGVDb250ZW50cyIsImluc2VydE5vZGUiLCJzZWxlY3RlZE5vZGVzIiwiZ2V0U2VsZWN0ZWROb2RlcyIsInBhcmVudEVsZW1lbnQiLCJzZWxlY3RlZE5vZGUiLCJpc0NvbnRhaW5Ob2RlTmFtZSIsImFmdGVyTm9kZXMiLCJjbG9uZU5vZGVzIiwiZ2V0QWZ0ZXJOb2RlczIiLCJiZWZvcmVOb2RlcyIsImdldEJlZm9yZU5vZGVzMiIsInNwbGl0U3RhcnQiLCJzcGxpdE5vZGUiLCJzcGxpdEVuZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJ1bldyYXAiLCJsZW5ndGgiLCJwcmV0aWVyIiwiY2xlYXJTZWxlY3Rpb24iLCJnZXRQYXRoIiwibm9kZSIsInJlc3VsdCIsImlzUm9vdE5vZGUiLCJwdXNoIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImNoaWxkTm9kZXMiLCJnZXRSYW5nZSIsIndpbmRvdyIsImdldFNlbGVjdGlvbiIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwiZ2V0UmFuZ2VBdCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwic2V0RW5kIiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJyZW1vdmVBbGxSYW5nZXMiLCJ0b3BNeVdyYXBwZXIiLCJkZWZyYWdtZW50YXRlVGV4dE5vZGVzIiwiZGVsZXRlRW1wdHlUZXh0Tm9kZXMiLCJkZWZyYWdtZW50YXRlTXlOb2RlcyIsIm5vZGVzIiwiY2xvbmVkTm9kZSIsImNsb25lTm9kZSIsImNoaWxkTm9kZSIsImhhc0F0dHJpYnV0ZSIsImZpbmRUb3BOb2RlIiwicGFyZW50Iiwic3RhcnROb2RlIiwiZW5kTm9kZSIsInN0YXJ0VG9wIiwiZW5kVG9wIiwidG9wTm9kZSIsImNoZWNrSXNUZXh0IiwiaXNQdXNoIiwib2Zmc2V0IiwiZGF0YSIsInN1YnN0ciIsImlubmVyVGV4dCIsImlzQ29udGFpbk5vZGUiLCJjb250YWluZXIiLCJjaGlsZCIsImlzTm9kZUluIiwic3RhZ2UiLCJzbiIsImVuIiwibmV4dFNpYmxpbmdOb2RlcyIsImNvbmNhdCIsInByZXZpb3VzU2libGluZ05vZGVzIiwiY29udGFpbmVyTm9kZSIsInByZXZpb3VzTm9kZSIsInByZXZpb3VzVGV4dCIsImVkaXRvckRpdiIsIl93cmFwcGVyc0NvbGxlY3Rpb24iLCJ0aGlzIiwiX2J1dHRvbnMiLCJBcnJheSIsIl9rZXlMaXN0ZW5lcnMiLCJfZWRpdG9yRGl2Iiwib25rZXlkb3duIiwiZXZlbnQiLCJrZXlQcmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicGF0aCIsInVuc2V0QWN0aXZlIiwiaXNNeUJ1dHRvbiIsImJ1dHRvbiIsImVsTmFtZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwic2V0QWN0aXZlIiwid2hpY2giLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJleGVjIiwiYWRkS2V5TGlzdGVuZXIiLCJrZXlMaXN0ZW5lciIsImFkZFdyYXBlciIsImFkZEJ1dHRvbiIsImVsIiwidG9vbEJ1dHRvbkNsaWNrIiwicnVuIiwiY29udGVudFRvU3RyaW5nIiwid3JhcHBlckluZm8iLCJiYkNvZGUiLCJpc09wZW5UYWciLCJzdHIiLCJpbmRleE9mIiwiaXNDbG9zZVRhZyIsInN0cmluZ1RvQ29udGVudCIsImN1cmVudE5vZGUiLCJjdXJTdHIiLCJjdXJlbnRQb3MiLCJzdWJTdHIiLCJvcGVuVGFnIiwidHh0IiwibmV3Tm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJjbG9zZVRhZyIsIkVkaXRvciIsIl93cmFwcGVySW5mbyIsIl9idXR0b25FbCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwicmVtb3ZlIiwiV3JhcHBlckJ1dHRvbiIsImNyZWF0ZVVsIiwidWwiLCJsaSIsImJyIiwiYnIyIiwic2V0U3RhcnRBZnRlciIsIkluc2VydFVsIiwic2V0U3RhcnQiLCJLZXlMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVW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SSxHQUNqQnhKLEVBQU1rQixXQUFXeUksR0FDakIzSixFQUFNNEosY0FBY0osS0FJckIsWUFBQXJDLFVBQVAsV0FFSWxCLEtBQUtrRCxVQUFVbkMsVUFBVStCLElBQUksa0JBRzFCLFlBQUFuQyxZQUFQLFdBRUlYLEtBQUtrRCxVQUFVbkMsVUFBVXFDLE9BQU8sa0JBR3hDLEVBckVBLEdBQWEsRUFBQVEsWSwySkNEYiwrQkF1REEsT0FyRFcsWUFBQXRDLEtBQVAsV0FFSSxJQUNJSyxFQURBNUgsRUFBUSxFQUFBTyxZQUFZeUMsV0FFeEIsR0FBd0QsTUFBckRoRCxFQUFNb0osd0JBQXdCcEgsV0FBV3JCLFNBQ3hDaUgsRUFBSzFGLFNBQVM0RyxjQUFjLE1BQzVCOUksRUFBTW9KLHdCQUF3QnBILFdBQVdBLFdBQVdoQixZQUFZNEcsR0FDaEU1SCxFQUFNOEosU0FBU2xDLEVBQUksT0FDbEIsQ0FDRCxJQUFJLEVBQUsxRixTQUFTNEcsY0FBYyxNQUM1QkYsRUFBTTFHLFNBQVNDLGVBQWUsS0FDbENuQyxFQUFNa0IsV0FBVzBILEdBQ2pCNUksRUFBTWtCLFdBQVcsR0FDakJsQixFQUFNNEosY0FBYyxLQXVCbEIsWUFBQTVHLFNBQVYsV0FFSSxJQUFJQyxPQUFPQyxhQVdQLE9BQWFoQixTQUFVaUIsVUFBVUMsY0FWakMsSUFBSUQsRUFBWSxFQUFBNUMsWUFBWTJDLGVBQzVCLEdBQUdDLEVBQVVFLFlBQWNGLEVBQVVHLFdBQWEsRUFDOUMsT0FBT0gsRUFBVUUsV0FBVyxHQUVoQyxHQUFHRixFQUFVSSxXQUFXLENBQ3BCLElBQUl2RCxFQUFRa0MsU0FBU2tCLGNBRWpDLE9BRFlwRCxFQUFNd0QsT0FBUUwsRUFBVU0sVUFBV04sRUFBVU8sYUFDbEQxRCxJQU9YLEVBdkRBLEdBQWEsRUFBQStKLGUiLCJmaWxlIjoibGliLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgpO1xuIiwiZXhwb3J0IGNsYXNzIFN0YXRpY1Rvb2xzIHtcblxuICAgIHN0YXRpYyB3cmFwKHJhbmdlOlJhbmdlLCBpc015V3JhcHBlcjoobm9kZTpOb2RlKT0+Ym9vbGVhbiwgY3JlYXRlV3JhcHBlcjooKT0+RWxlbWVudClcbiAgICB7XG4gICAgICAgIGlmKHJhbmdlLmNvbGxhcHNlZCAmJiByYW5nZS5lbmRPZmZzZXQgPT0gcmFuZ2Uuc3RhcnRPZmZzZXQpIHJldHVybjtcbiAgICAgICAgbGV0IHRvcE5vZGVzID0gU3RhdGljVG9vbHMuZ2V0Q29tbW9uVG9wTm9kZXMocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLmVuZENvbnRhaW5lcik7XG4gICAgICAgIGlmKCB0b3BOb2Rlc1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09ICdsaScgfHxcbiAgICAgICAgICAgIHRvcE5vZGVzWzFdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ2xpJyl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICBsZXQgd3JhcHBlciA9IGNyZWF0ZVdyYXBwZXIoKTtcbiAgICAgICAgaWYodG9wTm9kZXNbMF0gPT0gdG9wTm9kZXNbMV0pe1xuICAgICAgICAgICAgbGV0IHNlbGVjdGVkQ29udGVudCA9IHJhbmdlLmNsb25lQ29udGVudHMoKTtcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZWN0ZWRDb250ZW50KTtcbiAgICAgICAgICAgIHJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XG4gICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHdyYXBwZXIpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZE5vZGVzID0gU3RhdGljVG9vbHMuZ2V0U2VsZWN0ZWROb2Rlcyh0b3BOb2Rlc1swXS5wYXJlbnRFbGVtZW50LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2UuZW5kQ29udGFpbmVyKTtcbiAgICAgICAgICAgIGZvcihsZXQgc2VsZWN0ZWROb2RlIG9mIHNlbGVjdGVkTm9kZXMpe1xuICAgICAgICAgICAgICAgIGlmKFN0YXRpY1Rvb2xzLmlzQ29udGFpbk5vZGVOYW1lKHNlbGVjdGVkTm9kZSwgJ2JyJykpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGFmdGVyTm9kZXMgPSBTdGF0aWNUb29scy5jbG9uZU5vZGVzKFN0YXRpY1Rvb2xzLmdldEFmdGVyTm9kZXMyKHRvcE5vZGVzWzBdLCByYW5nZS5zdGFydENvbnRhaW5lcikpO1xuICAgICAgICAgICAgbGV0IGJlZm9yZU5vZGVzID0gU3RhdGljVG9vbHMuY2xvbmVOb2RlcyhTdGF0aWNUb29scy5nZXRCZWZvcmVOb2RlczIodG9wTm9kZXNbMV0sIHJhbmdlLmVuZENvbnRhaW5lcikpO1xuICAgICAgICAgICAgbGV0IHNwbGl0U3RhcnQgPSBTdGF0aWNUb29scy5zcGxpdE5vZGUocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIGxldCBzcGxpdEVuZCA9IFN0YXRpY1Rvb2xzLnNwbGl0Tm9kZShyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAvLyg8SFRNTEVsZW1lbnQ+dG9wTm9kZXNbMF0pLnJlbW92ZSgpO1xuICAgICAgICAgICAgKDxIVE1MRWxlbWVudD50b3BOb2Rlc1swXSkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b3BOb2Rlc1swXSk7XG4gICAgICAgICAgICAvLyg8SFRNTEVsZW1lbnQ+dG9wTm9kZXNbMV0pLnJlbW92ZSgpO1xuICAgICAgICAgICAgKDxIVE1MRWxlbWVudD50b3BOb2Rlc1sxXSkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b3BOb2Rlc1sxXSk7XG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNwbGl0U3RhcnRbMV0pKTtcbiAgICAgICAgICAgIGZvcihsZXQgc2VsZWN0ZWROb2RlIG9mIHNlbGVjdGVkTm9kZXMpe1xuICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZWN0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICBTdGF0aWNUb29scy51bldyYXAoc2VsZWN0ZWROb2RlLCBpc015V3JhcHBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNwbGl0RW5kWzBdKSk7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaT1iZWZvcmVOb2Rlcy5sZW5ndGgtMTsgaT49MDsgaS0tKXtcbiAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGJlZm9yZU5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3BsaXRFbmRbMV0pKTtcbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUod3JhcHBlcik7XG4gICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHNwbGl0U3RhcnRbMF0pKTtcbiAgICAgICAgICAgIGZvcihsZXQgaT1hZnRlck5vZGVzLmxlbmd0aC0xOyBpPj0wOyBpLS0pe1xuICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoYWZ0ZXJOb2Rlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFN0YXRpY1Rvb2xzLnByZXRpZXIod3JhcHBlciwgaXNNeVdyYXBwZXIpO1xuICAgICAgICBTdGF0aWNUb29scy5wcmV0aWVyKHdyYXBwZXIucGFyZW50Tm9kZSwgaXNNeVdyYXBwZXIpO1xuICAgICAgICBTdGF0aWNUb29scy5jbGVhclNlbGVjdGlvbigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQYXRoKG5vZGU6Tm9kZSk6Tm9kZVtdIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSghU3RhdGljVG9vbHMuaXNSb290Tm9kZShub2RlKSl7XG4gICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICAgICAgICAgIGlmKG5vZGUucGFyZW50Tm9kZSl7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIHVuV3JhcChub2RlOk5vZGUsIGlzTXlXcmFwcGVyOihub2RlOk5vZGUpPT5ib29sZWFuKVxuICAgIHtcbiAgICAgICAgaWYoaXNNeVdyYXBwZXIobm9kZSkpe1xuICAgICAgICAgICAgbGV0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZS5maXJzdENoaWxkLCBub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBTdGF0aWNUb29scy5wcmV0aWVyKHBhcmVudE5vZGUsIGlzTXlXcmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgaW4gbm9kZS5jaGlsZE5vZGVzKXtcbiAgICAgICAgICAgIGlmKCgraSBeIDApICE9PSAraSkgYnJlYWs7XG4gICAgICAgICAgICBTdGF0aWNUb29scy51bldyYXAobm9kZS5jaGlsZE5vZGVzW2ldLCBpc015V3JhcHBlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0UmFuZ2UoKTpSYW5nZVxuICAgIHtcbiAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3Rpb24gPSBTdGF0aWNUb29scy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIGlmKHNlbGVjdGlvbi5nZXRSYW5nZUF0ICYmIHNlbGVjdGlvbi5yYW5nZUNvdW50ID4gMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoc2VsZWN0aW9uLmFuY2hvck5vZGUpe1xuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kIChzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuXHRcdFx0XHRyZXR1cm4gcmFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuICg8YW55PmRvY3VtZW50KS5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNlbGVjdGlvbigpOlNlbGVjdGlvblxuICAgIHtcbiAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCg8YW55PmRvY3VtZW50KS5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIC8vSUVcbiAgICAgICAgICAgIHJldHVybiAoPGFueT5kb2N1bWVudCkuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY2xlYXJTZWxlY3Rpb24oKVxuICAgIHtcbiAgICAgICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyB0b3BNeVdyYXBwZXIobm9kZTpOb2RlLCBpc015V3JhcHBlcjoobm9kZTpOb2RlKT0+Ym9vbGVhbik6Tm9kZVxuICAgIHtcbiAgICAgICAgaWYoaXNNeVdyYXBwZXIobm9kZSkpe1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoU3RhdGljVG9vbHMuaXNSb290Tm9kZShub2RlKSl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RhdGljVG9vbHMudG9wTXlXcmFwcGVyKG5vZGUucGFyZW50Tm9kZSwgaXNNeVdyYXBwZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwcmV0aWVyKHdyYXBwZXI6Tm9kZSwgaXNNeVdyYXBwZXI6KG5vZGU6Tm9kZSk9PmJvb2xlYW4pXG4gICAge1xuICAgICAgICBTdGF0aWNUb29scy5kZWZyYWdtZW50YXRlVGV4dE5vZGVzKHdyYXBwZXIpO1xuICAgICAgICBpZih3cmFwcGVyLnBhcmVudE5vZGUpe1xuICAgICAgICAgICAgU3RhdGljVG9vbHMuZGVmcmFnbWVudGF0ZVRleHROb2Rlcyh3cmFwcGVyLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgU3RhdGljVG9vbHMuZGVsZXRlRW1wdHlUZXh0Tm9kZXMod3JhcHBlci5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIFN0YXRpY1Rvb2xzLmRlZnJhZ21lbnRhdGVNeU5vZGVzKHdyYXBwZXIucGFyZW50Tm9kZSwgaXNNeVdyYXBwZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNsb25lTm9kZXMobm9kZXM6Tm9kZVtdfE5vZGVMaXN0KTpOb2RlW11cbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpIGluIG5vZGVzKXtcbiAgICAgICAgICAgIGlmKCgraSBeIDApICE9PSAraSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgbGV0IGNsb25lZE5vZGUgPSBub2Rlc1tpXS5jbG9uZU5vZGUoKTtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGROb2RlcyA9IFN0YXRpY1Rvb2xzLmNsb25lTm9kZXMobm9kZXNbaV0uY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBjaGlsZE5vZGUgb2YgY2hpbGROb2Rlcyl7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZE5vZGUuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2xvbmVkTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNSb290Tm9kZShub2RlOk5vZGUpXG4gICAge1xuICAgICAgICBsZXQgciA9ICgoPEhUTUxFbGVtZW50Pm5vZGUpLmhhc0F0dHJpYnV0ZSkgPyAoPEhUTUxFbGVtZW50Pm5vZGUpLmhhc0F0dHJpYnV0ZSgnZWRpdG9yJykgOiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgc3RhdGljIGZpbmRUb3BOb2RlKGNoaWxkTm9kZTpOb2RlLCBub2RlTmFtZTpzdHJpbmcpOk5vZGVcbiAgICB7XG4gICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICBsZXQgcGFyZW50ID0gY2hpbGROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIHdoaWxlKCFTdGF0aWNUb29scy5pc1Jvb3ROb2RlKHBhcmVudCkpe1xuICAgICAgICAgICAgaWYocGFyZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gbm9kZU5hbWUpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENvbW1vblRvcE5vZGVzKHN0YXJ0Tm9kZTpOb2RlLCBlbmROb2RlOk5vZGUpOk5vZGVbXVxuICAgIHtcbiAgICAgICAgbGV0IHN0YXJ0VG9wID0gc3RhcnROb2RlO1xuICAgICAgICBsZXQgZW5kVG9wID0gZW5kTm9kZTtcbiAgICAgICAgd2hpbGUoc3RhcnRUb3AucGFyZW50Tm9kZSAhPSBlbmRUb3AucGFyZW50Tm9kZSl7XG4gICAgICAgICAgICBpZighU3RhdGljVG9vbHMuaXNSb290Tm9kZShzdGFydFRvcC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICAgICAgc3RhcnRUb3AgPSBzdGFydFRvcC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0VG9wID0gc3RhcnROb2RlO1xuICAgICAgICAgICAgICAgIGlmKCFTdGF0aWNUb29scy5pc1Jvb3ROb2RlKGVuZFRvcCkpe1xuICAgICAgICAgICAgICAgICAgICBlbmRUb3AgPSBlbmRUb3AucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbc3RhcnRUb3AsIGVuZFRvcF07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFmdGVyTm9kZXMyKHRvcE5vZGU6Tm9kZSwgZW5kQ29udGFpbmVyOk5vZGUsIGNoZWNrSXNUZXh0ID0gZmFsc2UpOk5vZGVbXVxuICAgIHtcbiAgICAgICAgbGV0IHJlc3VsdDpOb2RlW10gPSBbXTtcbiAgICAgICAgaWYoY2hlY2tJc1RleHQpe1xuICAgICAgICAgICAgbGV0IHNuID0gKGVuZENvbnRhaW5lci5ub2RlTmFtZSA9PSAnI3RleHQnKSA/IGVuZENvbnRhaW5lci5wYXJlbnROb2RlIDogZW5kQ29udGFpbmVyO1xuICAgICAgICAgICAgaWYoc24gPT0gdG9wTm9kZSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZXMgPSB0b3BOb2RlLmNoaWxkTm9kZXM7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gbm9kZXMubGVuZ3RoIC0gMTsgaSsrKXtcbiAgICAgICAgICAgIGlmKG5vZGVzW2ldID09IGVuZENvbnRhaW5lcil7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaChub2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QmVmb3JlTm9kZXMyKHRvcE5vZGU6Tm9kZSwgc3RhcnRDb250YWluZXI6Tm9kZSwgY2hlY2tJc1RleHQgPSBmYWxzZSk6Tm9kZVtdXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0Ok5vZGVbXSA9IFtdO1xuICAgICAgICBpZihjaGVja0lzVGV4dCl7XG4gICAgICAgICAgICBsZXQgc24gPSAoc3RhcnRDb250YWluZXIubm9kZU5hbWUgPT0gJyN0ZXh0JykgPyBzdGFydENvbnRhaW5lci5wYXJlbnROb2RlIDogc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICBpZihzbiA9PSB0b3BOb2RlKSByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxldCBub2RlcyA9IHRvcE5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgbGV0IGlzUHVzaCA9IGZhbHNlO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDw9IG5vZGVzLmxlbmd0aCAtIDE7IGkrKyl7XG4gICAgICAgICAgICBpZihpc1B1c2gpe1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG5vZGVzW2ldID09IHN0YXJ0Q29udGFpbmVyKXtcbiAgICAgICAgICAgICAgICBpc1B1c2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIHNwbGl0Tm9kZShub2RlOk5vZGUsIG9mZnNldDpudW1iZXIpOmFueVtdXG4gICAge1xuICAgICAgICBsZXQgcmVzdWx0OmFueVtdID0gW107XG4gICAgICAgIGlmKG5vZGUubm9kZU5hbWUgPT0gJyN0ZXh0Jyl7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoPGFueT5ub2RlKS5kYXRhLnN1YnN0cigwLCBvZmZzZXQpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCg8YW55Pm5vZGUpLmRhdGEuc3Vic3RyKG9mZnNldCkpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCg8YW55Pm5vZGUpLmlubmVyVGV4dC5zdWJzdHIoMCwgb2Zmc2V0KSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoPGFueT5ub2RlKS5pbm5lclRleHQuc3Vic3RyKG9mZnNldCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzQ29udGFpbk5vZGUoY29udGFpbmVyOk5vZGUsIGNoaWxkOk5vZGUpXG4gICAge1xuICAgICAgICBpZihjb250YWluZXIgPT0gY2hpbGQpIHJldHVybiB0cnVlO1xuICAgICAgICBpZihjb250YWluZXIubm9kZU5hbWUgPT0gJyN0ZXh0JykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSsrKXtcbiAgICAgICAgICAgIGlmKFN0YXRpY1Rvb2xzLmlzQ29udGFpbk5vZGUoY29udGFpbmVyLmNoaWxkTm9kZXNbaV0sIGNoaWxkKSl7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0NvbnRhaW5Ob2RlTmFtZShjb250YWluZXI6Tm9kZSwgbm9kZU5hbWU6c3RyaW5nKVxuICAgIHtcbiAgICAgICAgaWYoY29udGFpbmVyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gbm9kZU5hbWUpIHJldHVybiB0cnVlO1xuICAgICAgICBpZihjb250YWluZXIubm9kZU5hbWUgPT0gJyN0ZXh0JykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPD0gY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSsrKXtcbiAgICAgICAgICAgIGlmKFN0YXRpY1Rvb2xzLmlzQ29udGFpbk5vZGVOYW1lKGNvbnRhaW5lci5jaGlsZE5vZGVzW2ldLCBub2RlTmFtZSkpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNOb2RlSW4obm9kZTpOb2RlLCBub2RlczpOb2RlW10pOmJvb2xlYW5cbiAgICB7XG4gICAgICAgIGZvcihsZXQgaSBpbiBub2Rlcyl7XG4gICAgICAgICAgICBpZihub2RlID09IG5vZGVzW2ldKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNlbGVjdGVkTm9kZXMocGFyZW50Ok5vZGUsIHN0YXJ0Tm9kZTpOb2RlLCBlbmROb2RlOk5vZGUpOk5vZGVbXVxuICAgIHtcbiAgICAgICAgbGV0IGNoaWxkTm9kZXMgPSBwYXJlbnQuY2hpbGROb2RlcztcbiAgICAgICAgbGV0IHJlc3VsdDpOb2RlW10gPSBbXTtcbiAgICAgICAgbGV0IHN0YWdlID0gMDtcbiAgICAgICAgbGV0IHNuID0gKFN0YXRpY1Rvb2xzLmlzUm9vdE5vZGUoc3RhcnROb2RlLnBhcmVudE5vZGUpKSA/IHN0YXJ0Tm9kZSA6IHN0YXJ0Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBsZXQgZW4gPSAoU3RhdGljVG9vbHMuaXNSb290Tm9kZShlbmROb2RlLnBhcmVudE5vZGUpKSA/IGVuZE5vZGUgOiBlbmROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGZvcihsZXQgaSBpbiBjaGlsZE5vZGVzKXtcbiAgICAgICAgICAgIGlmKCgraSBeIDApICE9PSAraSkgYnJlYWs7XG4gICAgICAgICAgICBpZihzdGFnZSA9PSAwICYmIFN0YXRpY1Rvb2xzLmlzQ29udGFpbk5vZGUoY2hpbGROb2Rlc1tpXSwgc24pKXtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dFNpYmxpbmdOb2RlcyA9IFN0YXRpY1Rvb2xzLmdldEJlZm9yZU5vZGVzMihjaGlsZE5vZGVzW2ldLCBzbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChuZXh0U2libGluZ05vZGVzKTtcbiAgICAgICAgICAgICAgICBzdGFnZSA9IDE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihzdGFnZSA9PSAxKXtcbiAgICAgICAgICAgICAgICBpZighU3RhdGljVG9vbHMuaXNDb250YWluTm9kZShjaGlsZE5vZGVzW2ldLCBlbikpe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzU2libGluZ05vZGVzID0gU3RhdGljVG9vbHMuZ2V0QWZ0ZXJOb2RlczIoY2hpbGROb2Rlc1tpXSwgZW4sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHByZXZpb3VzU2libGluZ05vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGRlbGV0ZUVtcHR5VGV4dE5vZGVzKGNvbnRhaW5lck5vZGU6Tm9kZSlcbiAgICB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IGNoaWxkTm9kZXMgPSA8YW55PmNvbnRhaW5lck5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgd2hpbGUoaSA8PSBjaGlsZE5vZGVzLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgaWYoY2hpbGROb2Rlc1tpXS5ub2RlTmFtZSA9PSAnI3RleHQnICYmIGNoaWxkTm9kZXNbaV0uZGF0YSA9PSAnJyl7XG4gICAgICAgICAgICAgICAgLy9jaGlsZE5vZGVzW2ldLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGNoaWxkTm9kZXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZyYWdtZW50YXRlVGV4dE5vZGVzKGNvbnRhaW5lck5vZGU6Tm9kZSlcbiAgICB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IGNoaWxkTm9kZXMgPSA8YW55PmNvbnRhaW5lck5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgbGV0IHByZXZpb3VzTm9kZTphbnkgPSBudWxsO1xuICAgICAgICB3aGlsZShpIDw9IGNoaWxkTm9kZXMubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICBpZihwcmV2aW91c05vZGUgJiZcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGVzW2ldLm5vZGVOYW1lID09ICcjdGV4dCcgJiZcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUubm9kZU5hbWUgPT0gJyN0ZXh0Jyl7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzVGV4dCA9IHByZXZpb3VzTm9kZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUuZGF0YSA9IHByZXZpb3VzVGV4dCArIGNoaWxkTm9kZXNbaV0uZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgLy9jaGlsZE5vZGVzW2ldLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGVzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZyYWdtZW50YXRlTXlOb2Rlcyhjb250YWluZXJOb2RlOk5vZGUsIGlzTXlXcmFwcGVyOihub2RlOk5vZGUpPT5ib29sZWFuKVxuICAgIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBsZXQgY2hpbGROb2RlcyA9IDxhbnk+Y29udGFpbmVyTm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICBsZXQgcHJldmlvdXNOb2RlOmFueSA9IG51bGw7XG4gICAgICAgIHdoaWxlKGkgPD0gY2hpbGROb2Rlcy5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIGlmKHByZXZpb3VzTm9kZSAmJiBpc015V3JhcHBlcihjaGlsZE5vZGVzW2ldKSAmJiBpc015V3JhcHBlcihwcmV2aW91c05vZGUpKXtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldmlvdXNUZXh0ID0gcHJldmlvdXNOb2RlLmlubmVyVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlLmlubmVyVGV4dCA9IHByZXZpb3VzVGV4dCArIGNoaWxkTm9kZXNbaV0uaW5uZXJUZXh0O1xuICAgICAgICAgICAgICAgICAgICAvL2NoaWxkTm9kZXNbaV0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTm9kZXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgSVRvb2xCdXR0b24gfSBmcm9tICcuL2ludGVyZmFjZXMvSVRvb2xCdXR0b24nO1xuaW1wb3J0IHsgSUVkaXRvciB9IGZyb20gJy4vaW50ZXJmYWNlcy9JRWRpdG9yJztcbmltcG9ydCB7IElLZXlMaXN0ZW5lciB9IGZyb20gJy4vaW50ZXJmYWNlcy9JS2V5TGlzdGVuZXInO1xuaW1wb3J0IHsgVFdyYXBwZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvVFdyYXBwZXInO1xuaW1wb3J0IHsgU3RhdGljVG9vbHMgfSBmcm9tICcuL1N0YXRpY1Rvb2xzJztcblxudHlwZSBUV3JhcHBlckNvbGxlY3Rpb24gPSB7XG4gICAgW2VsZW1lbnROYW1lOnN0cmluZ10gOiBUV3JhcHBlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEVkaXRvciBpbXBsZW1lbnRzIElFZGl0b3Ige1xuXG4gICAgcHJpdmF0ZSBfYnV0dG9uczpJVG9vbEJ1dHRvbltdO1xuXG4gICAgcHJpdmF0ZSBfZWRpdG9yRGl2OkVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIF9rZXlMaXN0ZW5lcnM6YW55O1xuXG4gICAgcHJpdmF0ZSBfd3JhcHBlcnNDb2xsZWN0aW9uOlRXcmFwcGVyQ29sbGVjdGlvbiA9IHt9O1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGVkaXRvckRpdjpFbGVtZW50KVxuICAgIHtcbiAgICAgICAgdGhpcy5fYnV0dG9ucyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLl9rZXlMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fZWRpdG9yRGl2ID0gZWRpdG9yRGl2O1xuICAgICAgICAoPEhUTUxFbGVtZW50PnRoaXMuX2VkaXRvckRpdikub25rZXlkb3duID0gZnVuY3Rpb24oZXZlbnQ6S2V5Ym9hcmRFdmVudCl7XG4gICAgICAgICAgICB0aGlzLmtleVByZXNzKGV2ZW50KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgICAgICBlZGl0b3JEaXYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uKGU6RXZlbnQpIHtcbiAgICAgICAgICAgIGxldCByYW5nZSA9IFN0YXRpY1Rvb2xzLmdldFJhbmdlKCk7XG4gICAgICAgICAgICBsZXQgcGF0aCA9IFN0YXRpY1Rvb2xzLmdldFBhdGgocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xuICAgICAgICAgICAgLy9pZighU3RhdGljVG9vbHMuaXNOb2RlSW4odGhpcy5fZWRpdG9yRGl2LCBwYXRoKSl7XG4gICAgICAgICAgICAvLyAgICByZXR1cm47XG4gICAgICAgICAgICAvL31cbiAgICAgICAgICAgIGZvcihsZXQgaSBpbiB0aGlzLl9idXR0b25zKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9idXR0b25zW2ldLnVuc2V0QWN0aXZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc015QnV0dG9uKHRoaXMuX2J1dHRvbnNbaV0sIHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNNeUJ1dHRvbihidXR0b246SVRvb2xCdXR0b24sIHBhdGg6Tm9kZVtdKVxuICAgIHtcbiAgICAgICAgZm9yKGxldCBpIGluIHBhdGgpe1xuICAgICAgICAgICAgaWYoKDxIVE1MRWxlbWVudD5wYXRoW2ldKS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IGJ1dHRvbi53cmFwcGVyLmVsTmFtZSAmJlxuICAgICAgICAgICAgICAgICg8SFRNTEVsZW1lbnQ+cGF0aFtpXSkuY2xhc3NMaXN0LmNvbnRhaW5zKGJ1dHRvbi53cmFwcGVyLmNsYXNzTmFtZSkpe1xuICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QWN0aXZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGtleVByZXNzKGV2ZW50OktleWJvYXJkRXZlbnQpXG4gICAge1xuICAgICAgICBsZXQgcmFuZ2UgPSBTdGF0aWNUb29scy5nZXRSYW5nZSgpO1xuICAgICAgICBsZXQgcGF0aCA9IFN0YXRpY1Rvb2xzLmdldFBhdGgocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xuICAgICAgICBmb3IobGV0IGkgaW4gdGhpcy5fYnV0dG9ucyl7XG4gICAgICAgICAgICB0aGlzLl9idXR0b25zW2ldLnVuc2V0QWN0aXZlKCk7XG4gICAgICAgICAgICB0aGlzLmlzTXlCdXR0b24odGhpcy5fYnV0dG9uc1tpXSwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PSBudWxsKSB7IC8vIElFXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA8IDMyKXtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2tleUxpc3RlbmVyc1tldmVudC5rZXlDb2RlXS5leGVjKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChldmVudC53aGljaCAhPSAwKSB7IC8vINCy0YHQtSDQutGA0L7QvNC1IElFICYmIGV2ZW50LmNoYXJDb2RlICE9IDBcbiAgICAgICAgICAgIGlmIChldmVudC53aGljaCA8IDMyKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9rZXlMaXN0ZW5lcnNbZXZlbnQud2hpY2hdKXtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5TGlzdGVuZXJzW2V2ZW50LndoaWNoXS5leGVjKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGVkaXRvckRpdigpOkVsZW1lbnRcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lZGl0b3JEaXY7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEtleUxpc3RlbmVyKGtleUNvZGU6bnVtYmVyLCBrZXlMaXN0ZW5lcjpJS2V5TGlzdGVuZXIpXG4gICAge1xuICAgICAgICB0aGlzLl9rZXlMaXN0ZW5lcnNba2V5Q29kZV0gPSBrZXlMaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkV3JhcGVyKHdyYXBwZXI6VFdyYXBwZXIpXG4gICAge1xuICAgICAgICB0aGlzLl93cmFwcGVyc0NvbGxlY3Rpb25bd3JhcHBlci5lbE5hbWUrJ18nK3dyYXBwZXIuY2xhc3NOYW1lXSA9IHdyYXBwZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEJ1dHRvbihidXR0b246SVRvb2xCdXR0b24pXG4gICAge1xuICAgICAgICBidXR0b24uZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZTpFdmVudCl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnRvb2xCdXR0b25DbGljayhidXR0b24pO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9idXR0b25zLnB1c2goYnV0dG9uKTtcbiAgICAgICAgdGhpcy5fd3JhcHBlcnNDb2xsZWN0aW9uW2J1dHRvbi53cmFwcGVyLmVsTmFtZSsnXycrYnV0dG9uLndyYXBwZXIuY2xhc3NOYW1lXSA9IGJ1dHRvbi53cmFwcGVyO1xuICAgICAgICBpZihidXR0b24ud3JhcHBlci5jaGlsZCl7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBidXR0b24ud3JhcHBlci5jaGlsZDtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXJzQ29sbGVjdGlvbltjaGlsZC5lbE5hbWUrJ18nK2NoaWxkLmNsYXNzTmFtZV0gPSBjaGlsZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdG9vbEJ1dHRvbkNsaWNrKGJ1dHRvbjpJVG9vbEJ1dHRvbilcbiAgICB7XG4gICAgICAgIGJ1dHRvbi5ydW4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udGVudFRvU3RyaW5nKG5vZGU6Tm9kZSk6c3RyaW5nXG4gICAge1xuICAgICAgICBsZXQgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgICAgICBmb3IobGV0IGk9MDsgaTw9Y2hpbGROb2Rlcy5sZW5ndGgtMTsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgaWYoY2hpbGROb2RlLm5vZGVOYW1lID09ICcjdGV4dCcpe1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAoPFRleHQ+Y2hpbGROb2RlKS5kYXRhO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGVOYW1lID0gY2hpbGROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9ICg8SFRNTEVsZW1lbnQ+Y2hpbGROb2RlKS5jbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZXJJbmZvID0gdGhpcy5fd3JhcHBlcnNDb2xsZWN0aW9uW25vZGVOYW1lKydfJytjbGFzc05hbWVdO1xuICAgICAgICAgICAgICAgIGlmKHdyYXBwZXJJbmZvKXtcbiAgICAgICAgICAgICAgICAgICAgaWYobm9kZU5hbWUgPT0gJ2JyJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ1svJyt3cmFwcGVySW5mby5iYkNvZGUrJ10nO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnWycrd3JhcHBlckluZm8uYmJDb2RlKyddJyArIHRoaXMuY29udGVudFRvU3RyaW5nKGNoaWxkTm9kZSkgKyAnWy8nK3dyYXBwZXJJbmZvLmJiQ29kZSsnXSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuY29udGVudFRvU3RyaW5nKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc09wZW5UYWcoc3RyOnN0cmluZyk6VFdyYXBwZXJcbiAgICB7XG4gICAgICAgIGZvcihsZXQgaSBpbiB0aGlzLl93cmFwcGVyc0NvbGxlY3Rpb24pe1xuICAgICAgICAgICAgbGV0IGJiQ29kZSA9IHRoaXMuX3dyYXBwZXJzQ29sbGVjdGlvbltpXS5iYkNvZGU7XG4gICAgICAgICAgICBpZihzdHIuaW5kZXhPZignWycgKyBiYkNvZGUgKyAnXScpID09IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwcGVyc0NvbGxlY3Rpb25baV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0Nsb3NlVGFnKHN0cjpzdHJpbmcpOlRXcmFwcGVyXG4gICAge1xuICAgICAgICBmb3IobGV0IGkgaW4gdGhpcy5fd3JhcHBlcnNDb2xsZWN0aW9uKXtcbiAgICAgICAgICAgIGxldCBiYkNvZGUgPSB0aGlzLl93cmFwcGVyc0NvbGxlY3Rpb25baV0uYmJDb2RlO1xuICAgICAgICAgICAgaWYoc3RyLmluZGV4T2YoJ1svJyArIGJiQ29kZSArICddJykgPT0gMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZXJzQ29sbGVjdGlvbltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RyaW5nVG9Db250ZW50KHN0cjpzdHJpbmcpXG4gICAge1xuICAgICAgICBsZXQgY3VyZW50Tm9kZSA9IDxIVE1MRWxlbWVudD50aGlzLmVkaXRvckRpdjtcbiAgICAgICAgbGV0IGN1clN0ciA9ICcnO1xuICAgICAgICBsZXQgY3VyZW50UG9zID0gMDtcbiAgICAgICAgd2hpbGUoY3VyZW50UG9zIDw9IHN0ci5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgIGxldCBzdWJTdHIgPSBzdHIuc3Vic3RyKGN1cmVudFBvcywgNilcbiAgICAgICAgICAgIGxldCBvcGVuVGFnID0gdGhpcy5pc09wZW5UYWcoc3ViU3RyKTtcbiAgICAgICAgICAgIGlmKG9wZW5UYWcpe1xuICAgICAgICAgICAgICAgIGlmKGN1clN0cil7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjdXJTdHIpO1xuICAgICAgICAgICAgICAgICAgICBjdXJlbnROb2RlLmFwcGVuZENoaWxkKHR4dCk7XG4gICAgICAgICAgICAgICAgICAgIGN1clN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZWxOYW1lID0gb3BlblRhZy5lbE5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IGNsYXNzTmFtZSA9IG9wZW5UYWcuY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBuZXdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbE5hbWUpO1xuICAgICAgICAgICAgICAgIG5ld05vZGUuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIGN1cmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XG4gICAgICAgICAgICAgICAgY3VyZW50Tm9kZSA9IG5ld05vZGU7XG4gICAgICAgICAgICAgICAgY3VyZW50UG9zICs9IG9wZW5UYWcuYmJDb2RlLmxlbmd0aCArIDI7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2xvc2VUYWcgPSB0aGlzLmlzQ2xvc2VUYWcoc3ViU3RyKTtcbiAgICAgICAgICAgIGlmKGNsb3NlVGFnKXtcbiAgICAgICAgICAgICAgICBpZihjdXJlbnROb2RlID09IHRoaXMuZWRpdG9yRGl2KXtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGN1clN0cil7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjdXJTdHIpO1xuICAgICAgICAgICAgICAgICAgICBjdXJlbnROb2RlLmFwcGVuZENoaWxkKHR4dCk7XG4gICAgICAgICAgICAgICAgICAgIGN1clN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZWxOYW1lID0gY2xvc2VUYWcuZWxOYW1lO1xuICAgICAgICAgICAgICAgIGN1cmVudE5vZGUgPSBjdXJlbnROb2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY3VyZW50UG9zICs9IGNsb3NlVGFnLmJiQ29kZS5sZW5ndGggKyAzO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyU3RyICs9IHN0ci5zdWJzdHIoY3VyZW50UG9zLCAxKTtcbiAgICAgICAgICAgIGN1cmVudFBvcyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmKGN1clN0cil7XG4gICAgICAgICAgICBsZXQgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3VyU3RyKTtcbiAgICAgICAgICAgIGN1cmVudE5vZGUuYXBwZW5kQ2hpbGQodHh0KTtcbiAgICAgICAgICAgIGN1clN0ciA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgSVRvb2xCdXR0b24gfSBmcm9tICcuL2ludGVyZmFjZXMvSVRvb2xCdXR0b24nO1xuaW1wb3J0IHsgU3RhdGljVG9vbHMgfSBmcm9tICcuL1N0YXRpY1Rvb2xzJztcbmltcG9ydCB7IFRXcmFwcGVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL1RXcmFwcGVyJztcblxuZXhwb3J0IGNsYXNzIFdyYXBwZXJCdXR0b24gaW1wbGVtZW50cyBJVG9vbEJ1dHRvbiB7XG5cbiAgICBwcml2YXRlIF9idXR0b25FbDpFbGVtZW50O1xuXG4gICAgLy9wcml2YXRlIF90b29sczpUb29scztcblxuICAgIHByaXZhdGUgX3dyYXBwZXJJbmZvOlRXcmFwcGVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGJ1dHRvbjpFbGVtZW50LCB3cmFwcGVyOlRXcmFwcGVyKVxuICAgIHtcbiAgICAgICAgLy90aGlzLl90b29scyA9IG5ldyBUb29scygpO1xuICAgICAgICAvL3RoaXMuX3Rvb2xzLmNyZWF0ZVdyYXBwZXIgPSB0aGlzLmNyZWF0ZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgICAgICAgLy90aGlzLl90b29scy5pc015V3JhcHBlciA9IHRoaXMuaXNNeVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fd3JhcHBlckluZm8gPSB3cmFwcGVyO1xuICAgICAgICB0aGlzLl9idXR0b25FbCA9IGJ1dHRvbjtcbiAgICB9XG5cbiAgICBnZXQgZWwoKTpFbGVtZW50XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uRWw7XG4gICAgfVxuXG4gICAgZ2V0IHdyYXBwZXIoKTpUV3JhcHBlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZXJJbmZvO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGNyZWF0ZVdyYXBwZXIoKTpFbGVtZW50XG4gICAge1xuICAgICAgICBsZXQgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fd3JhcHBlckluZm8uZWxOYW1lKTtcbiAgICAgICAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuX3dyYXBwZXJJbmZvLmNsYXNzTmFtZSk7XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNNeVdyYXBwZXIobm9kZTpOb2RlKTpib29sZWFuXG4gICAge1xuICAgICAgICBpZigoPEVsZW1lbnQ+bm9kZSkuY2xhc3NMaXN0ICYmICg8RWxlbWVudD5ub2RlKS5jbGFzc0xpc3QuY29udGFpbnMpe1xuICAgICAgICAgICAgcmV0dXJuICg8RWxlbWVudD5ub2RlKS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5fd3JhcHBlckluZm8uY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHJ1bigpXG4gICAge1xuICAgICAgICBsZXQgcmFuZ2UgPSBTdGF0aWNUb29scy5nZXRSYW5nZSgpO1xuICAgICAgICBsZXQgdG9wTXlXcmFwcGVyID0gU3RhdGljVG9vbHMudG9wTXlXcmFwcGVyKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLCB0aGlzLmlzTXlXcmFwcGVyLmJpbmQodGhpcykpO1xuICAgICAgICBpZih0b3BNeVdyYXBwZXIgPT09IG51bGwpe1xuICAgICAgICAgICAgU3RhdGljVG9vbHMud3JhcChyYW5nZSwgdGhpcy5pc015V3JhcHBlci5iaW5kKHRoaXMpLCB0aGlzLmNyZWF0ZVdyYXBwZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgU3RhdGljVG9vbHMudW5XcmFwKHRvcE15V3JhcHBlciwgdGhpcy5pc015V3JhcHBlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRBY3RpdmUoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uRWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlLWJ1dHRvbicpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1bnNldEFjdGl2ZSgpXG4gICAge1xuICAgICAgICB0aGlzLl9idXR0b25FbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUtYnV0dG9uJyk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgSVRvb2xCdXR0b24gfSBmcm9tICcuL2ludGVyZmFjZXMvSVRvb2xCdXR0b24nO1xuaW1wb3J0IHsgU3RhdGljVG9vbHMgfSBmcm9tICcuL1N0YXRpY1Rvb2xzJztcbmltcG9ydCB7IFRXcmFwcGVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL1RXcmFwcGVyJztcblxuZXhwb3J0IGNsYXNzIEluc2VydFVsIGltcGxlbWVudHMgSVRvb2xCdXR0b24ge1xuXG4gICAgcHJpdmF0ZSBfYnV0dG9uRWw6RWxlbWVudDtcblxuICAgIC8vcHJpdmF0ZSBfdG9vbHM6VG9vbHM7XG5cbiAgICBwcml2YXRlIF93cmFwcGVySW5mbzpUV3JhcHBlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidXR0b246RWxlbWVudCwgd3JhcHBlcjpUV3JhcHBlcilcbiAgICB7XG4gICAgICAgIC8vdGhpcy5fdG9vbHMgPSBuZXcgVG9vbHMoKTtcbiAgICAgICAgLy90aGlzLl90b29scy5pc015V3JhcHBlciA9IHRoaXMuaXNNeVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYnV0dG9uRWwgPSBidXR0b247XG4gICAgICAgIHRoaXMuX3dyYXBwZXJJbmZvID0gd3JhcHBlcjtcbiAgICB9XG5cbiAgICBnZXQgZWwoKTpFbGVtZW50XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uRWw7XG4gICAgfVxuXG4gICAgZ2V0IHdyYXBwZXIoKTpUV3JhcHBlclxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZXJJbmZvO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNNeVdyYXBwZXIobm9kZTpOb2RlKTpib29sZWFuXG4gICAge1xuICAgICAgICBpZiggbm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ2xpJyB8fFxuICAgICAgICBub2RlLnBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAndWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVVbCgpOkVsZW1lbnR7XG4gICAgICAgIGxldCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fd3JhcHBlckluZm8uZWxOYW1lKTtcbiAgICAgICAgdWwuY2xhc3NMaXN0LmFkZCh0aGlzLl93cmFwcGVySW5mby5jbGFzc05hbWUpO1xuICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuX3dyYXBwZXJJbmZvLmNoaWxkLmVsTmFtZSk7XG4gICAgICAgIC8vbGkuY2xhc3NMaXN0LmFkZCh0aGlzLl93cmFwcGVySW5mby5jaGlsZC5jbGFzc05hbWUpO1xuICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgIHJldHVybiB1bDtcbiAgICB9XG5cbiAgICBwdWJsaWMgcnVuKClcbiAgICB7XG4gICAgICAgIGxldCByYW5nZSA9IFN0YXRpY1Rvb2xzLmdldFJhbmdlKCk7XG4gICAgICAgIGxldCB0b3BNeVdyYXBwZXIgPSBTdGF0aWNUb29scy50b3BNeVdyYXBwZXIocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIsIHRoaXMuaXNNeVdyYXBwZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIGlmKHRvcE15V3JhcHBlciA9PT0gbnVsbCl7XG4gICAgICAgICAgICBsZXQgdWwgPSB0aGlzLmNyZWF0ZVVsKCk7XG4gICAgICAgICAgICBsZXQgYnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpO1xuICAgICAgICAgICAgbGV0IGJyMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJyk7XG4gICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGJyKTtcbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodWwpO1xuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShicjIpO1xuICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcih1bCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QWN0aXZlKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2J1dHRvbkVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZS1idXR0b24nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5zZXRBY3RpdmUoKVxuICAgIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uRWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlLWJ1dHRvbicpO1xuICAgIH1cblxufSIsImltcG9ydCB7IElLZXlMaXN0ZW5lciB9IGZyb20gJy4vaW50ZXJmYWNlcy9JS2V5TGlzdGVuZXInO1xuaW1wb3J0IHsgU3RhdGljVG9vbHMgfSBmcm9tICcuL1N0YXRpY1Rvb2xzJztcblxuZXhwb3J0IGNsYXNzIEtleUxpc3RlbmVyIGltcGxlbWVudHMgSUtleUxpc3RlbmVyIHtcblxuICAgIHB1YmxpYyBleGVjKClcbiAgICB7XG4gICAgICAgIGxldCByYW5nZSA9IFN0YXRpY1Rvb2xzLmdldFJhbmdlKCk7XG4gICAgICAgIGxldCBlbDtcbiAgICAgICAgaWYocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnTEknKXtcbiAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChlbCwgMCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKTtcbiAgICAgICAgICAgIGxldCB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXFx1MDBBMCcpO1xuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0eHQpO1xuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShlbCk7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGVsKTtcbiAgICAgICAgICAgIC8vIGxldCBwYXJlbnQgPSAocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSAnI3RleHQnKSA/XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSA6XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgICAgICAgICAvLyBwYXJlbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgLy8gbGV0IHR4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcXHUwMEEwJyk7XG4gICAgICAgICAgICAvLyBwYXJlbnQuYXBwZW5kQ2hpbGQodHh0KTtcbiAgICAgICAgICAgIC8vIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoZWwpO1xuXG4gICAgICAgICAgICAvLyBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAvLyBsZXQgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1xcdUZFRkYnKTtcbiAgICAgICAgICAgIC8vIGVsLmFwcGVuZENoaWxkKHR4dCk7XG4gICAgICAgICAgICAvLyBsZXQgdG9wUCA9IHRoaXMudG9vbHMuZmluZFRvcE5vZGUocmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIsICdwJyk7XG4gICAgICAgICAgICAvLyBpZih0b3BQICE9PSBudWxsKXtcbiAgICAgICAgICAgIC8vICAgICAoPGFueT50b3BQKS5hZnRlcihlbCk7XG4gICAgICAgICAgICAvLyAgICAgcmFuZ2Uuc2V0U3RhcnQoZWwsIDApO1xuICAgICAgICAgICAgLy8gfWVsc2V7XG4gICAgICAgICAgICAvLyAgICAgcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICAvLyAgICAgcmFuZ2Uuc2V0U3RhcnQoZWwsIDApO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFJhbmdlKCk6UmFuZ2VcbiAgICB7XG4gICAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgc2VsZWN0aW9uID0gU3RhdGljVG9vbHMuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZihzZWxlY3Rpb24uZ2V0UmFuZ2VBdCAmJiBzZWxlY3Rpb24ucmFuZ2VDb3VudCA+IDApe1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHNlbGVjdGlvbi5hbmNob3JOb2RlKXtcbiAgICAgICAgICAgICAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZCAoc2VsZWN0aW9uLmZvY3VzTm9kZSwgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0KTtcblx0XHRcdFx0cmV0dXJuIHJhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiAoPGFueT5kb2N1bWVudCkuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKClcbiAgICAgICAgfVxuICAgIH1cblxufSJdLCJzb3VyY2VSb290IjoiIn0=