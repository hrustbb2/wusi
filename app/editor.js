!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){}return e.wrap=function(t,o,n){if(!t.collapsed||t.endOffset!=t.startOffset){var r=e.getCommonTopNodes(t.startContainer,t.endContainer);if("li"!=r[0].nodeName.toLowerCase()&&"li"!=r[1].nodeName.toLowerCase()){var i=n();if(r[0]==r[1]){var a=t.cloneContents();i.appendChild(a),t.deleteContents(),t.insertNode(i)}else{for(var d=e.getSelectedNodes(r[0].parentElement,t.startContainer,t.endContainer),s=0,l=d;s<l.length;s++){var u=l[s];if(e.isContainNodeName(u,"br"))return}var c=e.cloneNodes(e.getAfterNodes2(r[0],t.startContainer)),p=e.cloneNodes(e.getBeforeNodes2(r[1],t.endContainer)),f=e.splitNode(t.startContainer,t.startOffset),N=e.splitNode(t.endContainer,t.endOffset);r[0].parentNode.removeChild(r[0]),r[1].parentNode.removeChild(r[1]),i.appendChild(document.createTextNode(f[1]));for(var h=0,v=d;h<v.length;h++){u=v[h];i.appendChild(u),e.unWrap(u,o)}i.appendChild(document.createTextNode(N[0]));for(var g=p.length-1;g>=0;g--)t.insertNode(p[g]);t.insertNode(document.createTextNode(N[1])),t.insertNode(i),t.insertNode(document.createTextNode(f[0]));for(g=c.length-1;g>=0;g--)t.insertNode(c[g])}e.pretier(i,o),e.pretier(i.parentNode,o),e.clearSelection()}}},e.getPath=function(t){for(var o=[];!e.isRootNode(t)&&(o.push(t),t.parentNode);)t=t.parentNode;return o},e.unWrap=function(t,o){if(o(t)){for(var n=t.parentNode;t.firstChild;)n.insertBefore(t.firstChild,t);n.removeChild(t),e.pretier(n,o)}for(var r in t.childNodes){if((0^+r)!=+r)break;e.unWrap(t.childNodes[r],o)}},e.getRange=function(){if(!window.getSelection)return document.selection.createRange();var t=e.getSelection();if(t.getRangeAt&&t.rangeCount>0)return t.getRangeAt(0);if(t.anchorNode){var o=document.createRange();return o.setEnd(t.focusNode,t.focusOffset),o}},e.getSelection=function(){return window.getSelection?window.getSelection():document.selection?document.selection.createRange():void 0},e.clearSelection=function(){window.getSelection&&window.getSelection().removeAllRanges()},e.topMyWrapper=function(t,o){return o(t)?t:e.isRootNode(t)?null:e.topMyWrapper(t.parentNode,o)},e.pretier=function(t,o){e.defragmentateTextNodes(t),t.parentNode&&(e.defragmentateTextNodes(t.parentNode),e.deleteEmptyTextNodes(t.parentNode),e.defragmentateMyNodes(t.parentNode,o))},e.cloneNodes=function(t){var o=[];for(var n in t){if((0^+n)!=+n)break;for(var r=t[n].cloneNode(),i=0,a=e.cloneNodes(t[n].childNodes);i<a.length;i++){var d=a[i];r.appendChild(d)}o.push(r)}return o},e.isRootNode=function(e){return!!e.hasAttribute&&e.hasAttribute("editor")},e.findTopNode=function(t,o){for(var n=null,r=t.parentNode;!e.isRootNode(r);){if(r.nodeName.toLowerCase()==o){n=r;break}r=r.parentNode}return n},e.getCommonTopNodes=function(t,o){for(var n=t,r=o;n.parentNode!=r.parentNode;)if(e.isRootNode(n.parentNode)){if(n=t,e.isRootNode(r))break;r=r.parentNode}else n=n.parentNode;return[n,r]},e.getAfterNodes2=function(e,t,o){void 0===o&&(o=!1);var n=[];if(o&&("#text"==t.nodeName?t.parentNode:t)==e)return n;for(var r=e.childNodes,i=0;i<=r.length-1&&r[i]!=t;i++)n.push(r[i]);return n},e.getBeforeNodes2=function(e,t,o){void 0===o&&(o=!1);var n=[];if(o&&("#text"==t.nodeName?t.parentNode:t)==e)return n;for(var r=e.childNodes,i=!1,a=0;a<=r.length-1;a++)i&&n.push(r[a]),r[a]==t&&(i=!0);return n},e.splitNode=function(e,t){var o=[];return"#text"==e.nodeName?(o.push(e.data.substr(0,t)),o.push(e.data.substr(t))):(o.push(e.innerText.substr(0,t)),o.push(e.innerText.substr(t))),o},e.isContainNode=function(t,o){if(t==o)return!0;if("#text"==t.nodeName)return!1;for(var n=!1,r=0;r<=t.childNodes.length-1;r++)if(e.isContainNode(t.childNodes[r],o)){n=!0;break}return n},e.isContainNodeName=function(t,o){if(t.nodeName.toLowerCase()==o)return!0;if("#text"==t.nodeName)return!1;for(var n=!1,r=0;r<=t.childNodes.length-1;r++)if(e.isContainNodeName(t.childNodes[r],o)){n=!0;break}return n},e.isNodeIn=function(e,t){for(var o in t)if(e==t[o])return!0;return!1},e.getSelectedNodes=function(t,o,n){var r=t.childNodes,i=[],a=0,d=e.isRootNode(o.parentNode)?o:o.parentNode,s=e.isRootNode(n.parentNode)?n:n.parentNode;for(var l in r){if((0^+l)!=+l)break;if(0==a&&e.isContainNode(r[l],d)){var u=e.getBeforeNodes2(r[l],d,!0);i=i.concat(u),a=1}else if(1==a){if(e.isContainNode(r[l],s)){var c=e.getAfterNodes2(r[l],s,!0);i=i.concat(c);break}i.push(r[l])}}return i},e.deleteEmptyTextNodes=function(e){for(var t=0,o=e.childNodes;t<=o.length-1;)"#text"==o[t].nodeName&&""==o[t].data?o[t].parentNode.removeChild(o[t]):t++},e.defragmentateTextNodes=function(e){for(var t=0,o=e.childNodes,n=null;t<=o.length-1;)if(n&&"#text"==o[t].nodeName&&"#text"==n.nodeName){var r=n.data;n.data=r+o[t].data,o[t].parentNode.removeChild(o[t])}else n=o[t],t++},e.defragmentateMyNodes=function(e,t){for(var o=0,n=e.childNodes,r=null;o<=n.length-1;)if(r&&t(n[o])&&t(r)){var i=r.innerText;r.innerText=i+n[o].innerText,n[o].parentNode.removeChild(n[o])}else r=n[o],o++},e}();t.StaticTools=o}.apply(t,[o,t]))||(e.exports=n)},function(e,t,o){var n,r;n=[o,t,o(0)],void 0===(r=function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this._wrappersCollection={},this._buttons=new Array,this._keyListeners={},this._editorDiv=e,this._editorDiv.onkeyup=function(e){this.keyPress(e)}.bind(this),e.addEventListener("mouseup",function(e){var t=o.StaticTools.getRange(),n=o.StaticTools.getPath(t.startContainer);for(var r in this._buttons)this._buttons[r].unsetActive(),this.isMyButton(this._buttons[r],n)}.bind(this))}return e.prototype.isMyButton=function(e,t){for(var o in t)t[o].nodeName.toLowerCase()==e.wrapper.elName&&t[o].classList.contains(e.wrapper.className)&&e.setActive()},e.prototype.keyPress=function(e){var t=o.StaticTools.getRange(),n=o.StaticTools.getPath(t.startContainer);for(var r in this._buttons)this._buttons[r].unsetActive(),this.isMyButton(this._buttons[r],n);null==e.which&&e.keyCode<32&&(e.preventDefault(),this._keyListeners[e.keyCode].exec()),0!=e.which&&0!=e.charCode&&e.which<32&&(e.preventDefault(),this._keyListeners[e.which].exec())},Object.defineProperty(e.prototype,"editorDiv",{get:function(){return this._editorDiv},enumerable:!0,configurable:!0}),e.prototype.addKeyListener=function(e,t){this._keyListeners[e]=t},e.prototype.addWraper=function(e){this._wrappersCollection[e.elName+"_"+e.className]=e},e.prototype.addButton=function(e){if(e.el.addEventListener("mousedown",function(t){t.preventDefault(),this.toolButtonClick(e)}.bind(this)),this._buttons.push(e),this._wrappersCollection[e.wrapper.elName+"_"+e.wrapper.className]=e.wrapper,e.wrapper.child){var t=e.wrapper.child;this._wrappersCollection[t.elName+"_"+t.className]=t}},e.prototype.toolButtonClick=function(e){e.run()},e.prototype.contentToString=function(e){for(var t=e.childNodes,o="",n=0;n<=t.length-1;n++){var r=t[n];if("#text"==r.nodeName)o+=r.data;else{var i=r.nodeName.toLowerCase(),a=r.className,d=this._wrappersCollection[i+"_"+a];o+=d?"br"==i?"[/"+d.bbCode+"]":"["+d.bbCode+"]"+this.contentToString(r)+"[/"+d.bbCode+"]":this.contentToString(r)}}return o},e.prototype.isOpenTag=function(e){for(var t in this._wrappersCollection){var o=this._wrappersCollection[t].bbCode;if(0==e.indexOf("["+o+"]"))return this._wrappersCollection[t]}return null},e.prototype.isCloseTag=function(e){for(var t in this._wrappersCollection){var o=this._wrappersCollection[t].bbCode;if(0==e.indexOf("[/"+o+"]"))return this._wrappersCollection[t]}return null},e.prototype.stringToContent=function(e){for(var t=this.editorDiv,o="",n=0;n<=e.length-1;){var r=e.substr(n,6),i=this.isOpenTag(r);if(i){if(o){var a=document.createTextNode(o);t.appendChild(a),o=""}var d=i.elName,s=i.className,l=document.createElement(d);l.classList.add(s),t.appendChild(l),t=l,n+=i.bbCode.length+2}else{var u=this.isCloseTag(r);if(u){if(t==this.editorDiv)break;if(o){a=document.createTextNode(o);t.appendChild(a),o=""}d=u.elName;t=t.parentElement,n+=u.bbCode.length+3}else o+=e.substr(n,1),n+=1}}if(o){a=document.createTextNode(o);t.appendChild(a),o=""}},e}();t.Editor=n}.apply(t,n))||(e.exports=r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,